<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.gamemode = gm_hitman_mode;
text = "";
can_read_mouse = true;
screen = 1;
position = 1;
max_option = 6;
can_switch = true;
screenx = room_width / 2;
screeny = room_height / 2;
recalpha = 0;
option_audio = snd_menu_accept;
lastx = mouse_x;
lasty = mouse_y;
tile = tile_layer_find(-9997, 0, 0);
tile_set_background(tile, bck_extras);
back = false;
c1 = c_green;
c2 = c_olive;
c3 = c_olive;
c6 = c_olive;

if(global.gamemode == gm_hitman_mode) {
    c4 = c_olive;
    c5 = c_olive;
} else {
    c4 = c_gray;
    c5 = c_gray;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tile = tile_layer_find(-9997, 0, 0);
tile_set_background(tile, bck_main);
instance_create(0, 0, obj_menu_handler);
audio_sound_gain(global.menu1, global.music_volume, 500);
audio_sound_gain(global.menu2, 0, 500);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fades in the "new room" and returns to the previous screen
if(recalpha &lt; 1) {
    recalpha += 1 / 15;
    alarm[3] = 1;
} else {
    if(screen == 1) {
        instance_destroy();
    } else {
        screen = 1;
    }
    alarm[2] = 1;  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Removes the fade in animation.
if(recalpha &gt; 0) {
    recalpha -= 1 / 15;
    alarm[2] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fades in the "new room" and performs the action selected on the menu.
if(recalpha &lt; 1) {
    recalpha += 1 / 15;
    alarm[1] = 1;
} else {
    if(position == 1) {
        if(screen == 1) {
            screen = 2;
        } else if(screen == 2) {
            global.gamemode = gm_raid_mode;
            screen = 1;
        }
    } else if(position == 2) {
        if(screen == 1) {

        } else if(screen == 2) {
            global.gamemode = gm_siege_mode;
            screen = 1;
        }    
    }else if(position == 3) {
        if(screen == 1) {

        } else if(screen == 2) {
            global.gamemode = gm_hitman_mode;
            screen = 1;
        }    
    } else if(position == 4) {
    } else if(position == 5) {
    } else if(position == 6) {}
    alarm[2] = 1;  
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_switch = true;
can_read_mouse = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(screen == 1) {
    max_option = 6;
} else if(screen == 2) {
    global.gamemode = position;
    max_option = 3;
}

if(global.gamemode == gm_hitman_mode &amp;&amp; screen == 1) {
    c4 = c_olive;
    c5 = c_olive;
} else {
    c4 = c_gray;
    c5 = c_gray;
}
// The mouse can select things if the cursor is in especified areas
if(global.control) {
    // Allows mouse cursor movement through the menus
    if((mouse_x &gt; 282 &amp;&amp; mouse_x &lt; 757) &amp;&amp; (mouse_y &gt; 202 &amp;&amp; mouse_y &lt; 776) &amp;&amp; (can_read_mouse)) {    
        if(mouse_y &gt; 202 &amp;&amp; mouse_y &lt; 321) {
            position = 1;   
            if(screen == 2) {
                global.gamemode = gm_raid_mode;
            }        
        } else if(mouse_y &gt; 328 &amp;&amp; mouse_y &lt; 413) {
            position = 2;  
            if(screen == 2) {
                global.gamemode = gm_siege_mode;
            }                                
        } else if(mouse_y &gt; 420 &amp;&amp; mouse_y &lt; 502) {
            position = 3;               
            if(screen == 2) {
                global.gamemode = gm_hitman_mode;
            }                    
        } else if(mouse_y &gt; 509 &amp;&amp; mouse_y &lt; 593) {
            position = 4;         
        } else if(mouse_y &gt; 600 &amp;&amp; mouse_y &lt; 681) {
            position = 5;         
        } else if(mouse_y &gt; 688 &amp;&amp; mouse_y &lt; 776) {
            position = 6;         
        }
    }
}

// Allows gamepad movement through the menus
if((gamepad_axis_value(0, gp_axislv) &lt; -0.5 || keyboard_check_pressed(vk_up) || keyboard_check_pressed(ord('W'))) &amp;&amp; can_switch == true) {
    can_switch = false;
    if(global.gamemode == gm_hitman_mode &amp;&amp; screen == 1) {
        position --;
    } else {
        if(screen == 1) {
            if(position == 6) {
                 position -= 3;   
            } else {
                position --;
            }
        } else {
            position --;
        }
    }
    alarm[0] = 15;
    audio_play_sound(snd_menu_cursor, 0, false);
} else if((gamepad_axis_value(0, gp_axislv) &gt; 0.5 || keyboard_check_pressed(vk_down) || keyboard_check_pressed(ord('S'))) &amp;&amp; can_switch == true) {
    can_switch = false;
    position ++;
    alarm[0] = 15;
    audio_play_sound(snd_menu_cursor, 0, false);
} 

// Responds to which element of the menu is selected when pressing the A button or the left click.
if(gamepad_button_check_pressed(0, gp_face1) || mouse_check_button_pressed(mb_left)) {
    if(position == max_option) {
        option_audio = snd_menu_cancel;
    } else {
        option_audio = snd_menu_accept;
    }
    
    if(can_switch) {
        can_switch = false;
        alarm[1] = 1;
        alarm[0] = 15;        
        audio_play_sound(option_audio, 0, false);   
    }
}

if(gamepad_button_check_pressed(0, gp_face2) || mouse_check_button_pressed(mb_right) || keyboard_check_pressed(vk_escape)) {    
    if(can_switch) {
        can_switch = false;
        can_read_mouse = false;
        alarm[3] = 1;
        alarm[0] = 15;
        audio_play_sound(snd_menu_cancel, 0, false);   
    }
}

// Sets the color of the selected element and its text depennding on which screen it is.
if(position == 1) {
    c1 = c_green;
    c2 = c_olive;
    c3 = c_olive;
    c6 = c_olive;
    if(screen == 1) {
        text = getString("menu_extras_description_1");
    } else if(screen == 2) {
        text = getString("menu_extras_mode_1");  
    }
} else if(position == 2) {
    c1 = c_olive;
    c2 = c_green;
    c3 = c_olive;
    c6 = c_olive;
    if(screen == 1) {
        text = getString("menu_extras_description_2");
    } else if(screen == 2) {
        text = getString("menu_extras_mode_2");  
    }         
} else if(position == 3) {
    c1 = c_olive;
    c2 = c_olive;
    c3 = c_green;
    c6 = c_olive;
    if(screen == 1) {
        text = getString("menu_extras_description_3");
    } else if(screen == 2) {
        text = getString("menu_extras_mode_3");  
    }
} else if(position == 4)  {
    if(global.gamemode == gm_hitman_mode) {
        c1 = c_olive;
        c2 = c_olive;
        c3 = c_olive;
        c4 = c_green; 
        c5 = c_olive;
        c6 = c_olive;   
        if(screen == 1) {
            text = getString("menu_extras_description_4");  
        }
    } else {
        c1 = c_olive;
        c2 = c_olive;
        c3 = c_olive;
        c4 = c_gray; 
        c5 = c_gray;
        c6 = c_olive;
        position = max_option;
    }
} else if(position == 5)  {
    if(global.gamemode == gm_hitman_mode) {
        c1 = c_olive;
        c2 = c_olive;
        c3 = c_olive;
        c4 = c_olive; 
        c5 = c_green;
        c6 = c_olive;   
        if(screen == 1) {
            text = getString("menu_extras_description_5");;  
        }
    } else {
        c1 = c_olive;
        c2 = c_olive;
        c3 = c_olive;
        c4 = c_gray; 
        c5 = c_gray;
        c6 = c_olive;
        position = max_option;
    }    
} else if(position == 6)  {    
    if(global.gamemode == gm_hitman_mode) {
        c1 = c_olive;
        c2 = c_olive;
        c3 = c_olive;
        c6 = c_green;   
        if(screen == 1) {
            text = getString("menu_extras_start_game"); 
        }
    } else {
        c1 = c_olive;
        c2 = c_olive;
        c3 = c_olive;
        c4 = c_gray; 
        c5 = c_gray;
        c6 = c_green;   
        if(screen == 1) {
            text = getString("menu_extras_start_game");  
        }
    }    
}

// Loops the positions of the menu
if(position &lt; 1) {
    position = max_option;
} else if(position &gt; max_option) {
    position = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draws the menus text.
draw_set_font(fnt_menu); // Sets the font to the menu font.
draw_set_halign(fa_center);
draw_text_colour(screenx, 16, getString("menu_extras_title"), c_white, c_white, c_white, c_white, 1);
draw_set_halign(fa_left);
if(screen == 1) {
    draw_text_colour(300, 256, getString("menu_extras_option_1"), c1, c1, c1, c1, 1);
    draw_text_colour(300, 346, getString("menu_extras_option_2"), c2, c2, c2, c2, 1);
    draw_text_colour(300, 436, getString("menu_extras_option_3"), c3, c3, c3, c3, 1);
    draw_text_colour(300, 526, getString("menu_extras_option_4"), c4, c4, c4, c4, 1);
    draw_text_colour(300, 616, getString("menu_extras_option_5"), c5, c5, c5, c5, 1);
    draw_text_colour(300, 706, getString("menu_extras_option_6"), c6, c6, c6, c6, 1);
} else if(screen == 2) {
    draw_text_colour(300, 256, getString("gm_mode_2"), c1, c1, c1, c1, 1);
    draw_text_colour(300, 346, getString("gm_mode_3"), c2, c2, c2, c2, 1);
    draw_text_colour(300, 436, getString("gm_mode_4"), c3, c3, c3, c3, 1);
}

draw_menu_indicator();

// Draw game data
draw_set_font(fnt_upgrades);
draw_set_color(c_white);
draw_set_halign(fa_right);
draw_text(1367, 210, gamemode_name_factory());
draw_set_color(-1);
draw_set_halign(-1);
draw_set_font(-1);

// Draw game data thumbnail
draw_sprite(spr_gmthumbs, global.gamemode - 1, 1375, 219);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
